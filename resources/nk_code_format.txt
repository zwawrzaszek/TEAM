NK Code Format

nkfs:/red/communication/nk_code_format.txt

***

By JBT

***

Created on 2019-08-25

Updated on 2020-06-09

***

Copyright © JBT

All rights reserved. ***Pre-release: do not distribute!***

"""THE WORK IS PROVIDED "AS IS" AND THE AUTHORS AND OWNERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS WORK INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS OR OWNERS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS WORK."""

+++
Description

The standard New Kidronite method for formatting and styling programs, extending the UEWSG and mirroring the NK Recipe Format. Much of the inspiration came from the old JavaScript Quick Guide, which also contained lots of more JS-specific tips, tricks, and tutorials and which was created on 2015-09-23.

+++
Format Summary

IVFO:

Imports
Variables
Functions
Output

+++
Styling

===
Comments

• Keep all comments and styling up to date!
• Use the "code within comments" method, breaking the code up logically and *tersely* summarizing key points.
• Keep comments clear and helpful—code should be largely *self-documenting* but still *well-documented*, especially when dealing with obscure compatibility concerns, confusing problems, etc.
• Use hyperlinks or references to keep comments on difficult matters focused yet still provide more information and rationale.
• Derive man pages directly from [non-inline] code comments, without change.
• Code that is more complex and more important should have more comments, but all extra documentation—including full project changelogs, marketing materials, and training info—should generally *not* be placed in code comments. 
• If you are unsure, leave a comment—it can be hidden easily (or even removed) if it outlives its usefulness.
• Avoid excessive double line breaks (ie, blank lines) in the code, comments that share the same line as code, and other tricks that violate the UEWSG and make both code harder to read and comments harder to hide.

===
Code

• Use version control (eg, Git) to manage code projects and changes between releases.
• Use *single* quotes as a default in programming for easy nesting of double quotes (e.g., creating HTML strings or nesting JavaScript into an HTML page).
• Commented-out code should be retained—even committed—if it remains relevant, whether as a right way to do things or a wrong one!
• All unassigned variables may be listed together on one line for simplicity, but may also be listed like other variables, below.
• All other variables must be on their own line with a *separate* const/var/etc statement.
• "GLOBAL_VARS" and other top-level vars should be listed first, with descriptive uppercase names, in the appropriate division.
• All other vars should be given descriptive snake_case names.
• User-assigned variables should be imported as data or, in the worst case and when a user will directly modify a script, given a *clear* division before unassigned variables.
• Classes should start with uppercase letters but otherwise follow snake_case.
• Exceptions (and their classes/constructors) should be written in capital CamelCase, since they're exceptions!
• Function names should be verbs.
• Never run functions or other actions during variable assignment—if a variable must be assigned to a function or action, leave it unassigned and call/assign it later!

===
Syntax Highlighting

Based on the NK Color Palette, the following colors are the default for syntax-highlighting code (dark to light):

1. Red: functions, classes
2. Blue: vars, highlight
3. White: text, str
4. Brown: control chars, keywords
5. Green: block comments, comments
6. Purple: operators, int
7. Black: background, UI elements
8. Yellow: decorators, errors

+++
Format

===
Inline Comments (Python Style)

Note: Any code of unknown type (eg, markup) goes into Output by default.

"""
# [Title and other metadata according to NK Metadata Format]
#
# ...
#
# +++
# Description
#
# ["Long" description: what, briefly how, and rarely why; the description, if necessary, should be longer and more complete than the subtitle/short title but need not be a novel; more background information may go in the footer and especially detailed information may need to be put into another document (eg, "Complete Tutorial On New Program" or "The Secret History Of Old Program"), as noted under "Comments", above]
#
# ... # More front matter is permissible, though code should generally not have a TOC or foreward; also, leave uncommented blank line below when using Python, to close implicit docstring after the header concludes
#

#
# +++
# Imports
#
# ===
# Modules
#

#
# ===
# Data
#

#
# +++
# Variables
#
# ===
# Unassigned Variables
#

#
# ===
# Assigned Constants
#

#
# ===
# Other Assigned Variables
#

#
# +++
# Functions
#
# ===
# Classes
#
[class Class():
	'''
	Docstring—with *single* quotes (the PEP is wrong!)—starts with a 1-sentence brief summary of the class.

	Optional paragraphs may follow, providing more details about the *use* of the class; these may get parsed as documentation.

	+ public_method(params)
	# restricted_method(params)
	- private_method(params)
	'''
	'''
	A second docstring, directly after the first, may be used to document the unexposed *design* of the class and issues related to the development and testing, particularly if there are concerns which cannot be adequately addressed by inline comments.
	'''

	def class_method(): #  Read Definitions, below; don't forget to leave 1 blank line after the docstring(s)
		...
]
#
# ===
# Definitions
#
[def function(arg_1, arg_2, arg_3):
	'''
	Docstring—with *single* quotes (the PEP is wrong!)—starts with a 1-sentence brief summary of the function in active voice (eg, "Do x." but never "Does x.").

	Optional paragraphs may follow, providing more details about the *use* of the function; these may get parsed as documentation.

	**arg_1**: str: name of ... # If there are no parameters, write "No parameters"
	**arg_2**: bool: value of ...
	**arg_3**: list of int: contains...

	Returns tuple (hashes of list), int (number of ...) # If there are no returns, write "No returns"
	'''
	'''
	A second docstring, directly after the first, may be used to document the unexposed *design* of the function and issues related to the development and testing, particularly if there are concerns which cannot be adequately addressed by inline comments.
	'''

	if value: # Don't forget to leave 1 blank line after the docstring(s)
		...
]
# 
# +++
# Output
#
# ===
# Init
#

#
# ===
# Main
#

# 
# ... # Acknowledgments and other NKMF footer divisions, like Todo, are *very* common in code—they must be placed *after* the final line of code
"""