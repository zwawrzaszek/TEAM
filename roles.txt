Roles

https://github.com/bizzlebin/team/roles.txt

***

By Jeremiah Thomas, et al

***

Created on 2020-05-24

Updated on 2020-06-09

+++
Overview

I've worked on a number of projects before but most have either been with a smaller team than this and/or fairly disorganized (mostly the large corporate projects!). I've also not found a lot of solid information on how to design and implement project management; this is, I think, largely due to the unique nature of each project. Nonetheless, here are the roles I have planned, with their tentative descriptions and duties below; ideas are welcome. Please add your name to a role to claim it:

**Project Manager**: Jeremiah Thomas
**Customer Advocate**: Sandhya Joshi
**Documentation Specialist**: Anna Malmberg
**Lead Software Developer**: Zachary Wawrzaszek
**Lead UI Designer**: Jack Kagan
**Lead Tester**: Stavros Bannoura

+++
Duties

===
Project Manager

**Privileges**: Commit all (Git), change control board member (reqs), override veto, submit deliverables
**Primary deliverables**: Management infrastructure (internal), weekly reports to corporate (teacher!), overall project (complete)

The project manager is responsible both for the team and the deliverables. They must bridge the gap between the client, the company, and the rest of the team and will generally spend most of their time and energy focused on keeping the project on track. They cannot get bogged down in the details nor micromanage but should step in to resolve or prevent conflicts. A member of the change control board, the project manager also has general power over commits, can [cautiously] override anything that may threaten the project, and will make the final submission of deliverables. They also have to regularly report back to corporate—in this case, the teacher!

===
Customer Advocate

**Privileges**: Commit all (Git), change control board member (reqs), veto all
**Primary deliverables**: SRS

The customer advocate is the stand-in for the client. They must continually push for the client's needs, be able to see from the client's perspective, and be unafraid to respectfully challenge the direction of the project should it lose its way. As a member with a high-level view, they will help oversee commits, serve as the other half of the change control board, and may veto any part of the project that may hurt the company/client relationship. Since the customer advocate has such a clear insight into the customer's goals, they will also be the primary responsible party for the SRS, or software requirements specification.

===
Documentation Specialist

**Privileges**: Commit all (Git), review all
**Primary deliverables**: meeting notes (internal), overall project (formatting)

The documentation specialist is the master of language: written, technical, grammatical, and presentational. They must not just handle the final proofread of the documents, but must take an active role as copyeditor and artist to reduce ambiguous language, root out contradictions, and make the deliverables as user-friendly and appealing as possible—without introducing errors of their own! While they cannot veto any document directly, they must hold them for review. The documentation specialist is also responsible for taking the meeting minutes and helping to answer general questions about the UEWSG and other project-specific formats—study up!

===
Lead Software Developer

**Privileges**: change control board tiebreaker (reqs), veto HLD and LLD
**Primary deliverables**: HLD, LLD

The lead software developer is interested in getting the job done right. While this may or may not involve actual coding, the lead developer should have a strong grasp of programming languages, paradigms, and practices. They should be able to approach software from both a top-down and a bottom-up point of view. Given their expertise, they will be a tiebreaker for the change control board and can veto either of the design documents. However, this comes with a great responsibility: they are the primary responsible party for both the HLD (high-level design) and LLD (low-level design).

===
Lead UI Designer

**Privileges**: veto HLD
**Primary deliverables**: HLD (UI, incl graphics)

The lead UI designer is interested in getting the job done clearly and beautifully. This doesn't just mean decoration, but the painstaking process of understanding what the user needs to see, do, enter in, and so on. They need to think about clear dialog, obvious visual semantics, user error, and a host of other concerns that go far beyond adding colors and widgets. The lead UI designer will work closely with the lead developer in order to understand the SRS, create the HLD, and provide supporting graphics to describe the interface and overall program design.

===
Lead Tester

**Privileges**: veto LLD
**Primary deliverables**: LLD (algorithm, incl graphics)

The lead tester is interested in not having to do the job a second time! Testing involves not just unit tests, user tests, and integration tests but a proactive role in the development of the overall algorithm, where subtle—and not-so-subtle—mistakes can inflict heavy damage downstream. They will work closely with the lead software developer, particularly in understanding the SRS, creating the LLD (including modules, classes, functions, and other key parts), and providing the team with diagrams that show the underlying structure and data flows within the program.
